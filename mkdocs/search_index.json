{
    "docs": [
        {
            "location": "/", 
            "text": "What is Particle?\n\n\nParticle\n is an opinionated toolkit for building application-agnostic design systems built with love by \nPhase2\n.\n\n\n\n\nParticle is an opinionated set of tools and examples to:\n\n\n\n\nBuild an application-agnostic \ndesign system\n of asset files like Twig, Sass, javascript, and images\n\n\nApply that design system to a locally-served \nPattern Lab\n for rapid prototyping\n\n\nApply that design system to a \nDrupal or Grav theme\n\n\n\n\nProvides\n\n\n\n\nDrupal theme, Grav theme,  and Pattern Lab app\n\n\nStrict \nAtomic Design\n component structure\n\n\nWebpack bundling of all CSS, javascript, font, and static image assets for multiple targets (Drupal theme, Grav theme, Pattern Lab)\n\n\nWebpack Dev Server\n for local hosting and hot reloading of assets into Pattern Lab\n\n\nTwig namespaced paths\n automatically added into Drupal theme and Pattern Lab config. Within any twig file, \n@atoms/thing.twig\n means the same thing to Drupal theme and Pattern Lab.\n\n\nIconfont auto-generation\n\n\nBootstrap 4 integration, used for all starting example components\n\n\nAuto-linting against the \nAirBnB JavaScript Style Guide\n and sane Sass standards\n\n\nAll Webpack and Gulp files are fully configurable", 
            "title": "Home"
        }, 
        {
            "location": "/#what-is-particle", 
            "text": "Particle  is an opinionated toolkit for building application-agnostic design systems built with love by  Phase2 .   Particle is an opinionated set of tools and examples to:   Build an application-agnostic  design system  of asset files like Twig, Sass, javascript, and images  Apply that design system to a locally-served  Pattern Lab  for rapid prototyping  Apply that design system to a  Drupal or Grav theme", 
            "title": "What is Particle?"
        }, 
        {
            "location": "/#provides", 
            "text": "Drupal theme, Grav theme,  and Pattern Lab app  Strict  Atomic Design  component structure  Webpack bundling of all CSS, javascript, font, and static image assets for multiple targets (Drupal theme, Grav theme, Pattern Lab)  Webpack Dev Server  for local hosting and hot reloading of assets into Pattern Lab  Twig namespaced paths  automatically added into Drupal theme and Pattern Lab config. Within any twig file,  @atoms/thing.twig  means the same thing to Drupal theme and Pattern Lab.  Iconfont auto-generation  Bootstrap 4 integration, used for all starting example components  Auto-linting against the  AirBnB JavaScript Style Guide  and sane Sass standards  All Webpack and Gulp files are fully configurable", 
            "title": "Provides"
        }, 
        {
            "location": "/getting-started/system-requirements/", 
            "text": "Prerequisites\n\n\n\n\nNode \n^8.0.0\n\n\nPHP \n5.6\n, \n^7.0.0\n\n\nComposer \n^1.0.0", 
            "title": "System Requirements"
        }, 
        {
            "location": "/getting-started/system-requirements/#prerequisites", 
            "text": "Node  ^8.0.0  PHP  5.6 ,  ^7.0.0  Composer  ^1.0.0", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/getting-started/quickstart/", 
            "text": "Particle builds design systems in dev mode for local hosting, or production mode for optimized asset generation.\n\n\nQuickstart anywhere\n\n\n\n\nDownload the latest release\n\n\nExtract anywhere (i.e. the readme should be at \nany/where/particle/README.md\n)\n\n\nWithin the extracted folder run:\n\n\n\n\nnpm install\nnpm run setup\nnpm start\n\n\n\n\nSimply wait until the webpack bundle output appears then visit \nhttp://0.0.0.0:8080/pl\n (or \nhttp://localhost:8080/pl\n) and start working.\n\n\nQuickstart with Drupal 8\n\n\nParticle provides a Drupal 8 theme, the starting steps are slightly different:\n\n\n\n\nDownload the latest release\n\n\nExtract to \nthemes/\n at the root of your Drupal 8 install. (i.e. this readme should be at \n{drupal-root}/themes/particle/README.md\n)\n\n\n\n\nDownload and install the \nComponent Libraries module\n:\n\n\ndrush dl components\ndrush en components -y\n\n\nor\n\n\ndrupal module:install components\n\n\n\n\n\n\nWithin \n{drupal-root}/themes/particle/\n run:\n\n\nbash\nnpm install\nnpm run setup\nnpm run build:drupal\n\n\n\n\n\n\nThis will compile all assets and provide all namespaced Twig paths to the Drupal theme. Make sure to choose this theme in Drupal Appearance settings and \ndrush cr\n or \ndrupal cr all\n to clear cache.\n\n\nFor rapid, development-mode recompile and Drupal cache clear, edit \nwebpack.drupal.dev.js\n, find the \nonBuildEnd\n plugin and edit it from:\n\n\n// ORIGINAL\nplugins: [\n  new WebpackShellPlugin({\n    onBuildEnd: [\n      // CHANGE THE FOLLOWING LINE\n      'echo \\nWebpack drupal dev build complete! Edit apps/drupal/webpack.drupal.dev.js to replace this line with `drupal cr all` now.',\n    ],\n    dev: false, // Runs on EVERY rebuild\n  }),\n],\n\n\n\n\nto:\n\n\n// UPDATED\nplugins: [\n  new WebpackShellPlugin({\n    onBuildEnd: [\n      'drupal cr all',\n    ],\n    dev: false, // Runs on EVERY rebuild\n  }),\n],\n\n\n\n\nNow you have active Drupal development-mode compilation and cache clearing by just running:\n\n\nnpm run dev:drupal\n\n\n\n\nYou can still work in Pattern Lab while also working in Drupal by also running in another terminal:\n\n\nnpm start\n\n\n\n\nJust like in the regular Quickstart, when Webpack output appears, visit \nhttp://0.0.0.0/pl\n (or \nhttp://localhost/pl\n) to immediately start building and previewing your design system in Pattern Lab.", 
            "title": "Quickstart"
        }, 
        {
            "location": "/getting-started/quickstart/#quickstart-anywhere", 
            "text": "Download the latest release  Extract anywhere (i.e. the readme should be at  any/where/particle/README.md )  Within the extracted folder run:   npm install\nnpm run setup\nnpm start  Simply wait until the webpack bundle output appears then visit  http://0.0.0.0:8080/pl  (or  http://localhost:8080/pl ) and start working.", 
            "title": "Quickstart anywhere"
        }, 
        {
            "location": "/getting-started/quickstart/#quickstart-with-drupal-8", 
            "text": "Particle provides a Drupal 8 theme, the starting steps are slightly different:   Download the latest release  Extract to  themes/  at the root of your Drupal 8 install. (i.e. this readme should be at  {drupal-root}/themes/particle/README.md )   Download and install the  Component Libraries module :  drush dl components\ndrush en components -y  or  drupal module:install components    Within  {drupal-root}/themes/particle/  run:  bash\nnpm install\nnpm run setup\nnpm run build:drupal    This will compile all assets and provide all namespaced Twig paths to the Drupal theme. Make sure to choose this theme in Drupal Appearance settings and  drush cr  or  drupal cr all  to clear cache.  For rapid, development-mode recompile and Drupal cache clear, edit  webpack.drupal.dev.js , find the  onBuildEnd  plugin and edit it from:  // ORIGINAL\nplugins: [\n  new WebpackShellPlugin({\n    onBuildEnd: [\n      // CHANGE THE FOLLOWING LINE\n      'echo \\nWebpack drupal dev build complete! Edit apps/drupal/webpack.drupal.dev.js to replace this line with `drupal cr all` now.',\n    ],\n    dev: false, // Runs on EVERY rebuild\n  }),\n],  to:  // UPDATED\nplugins: [\n  new WebpackShellPlugin({\n    onBuildEnd: [\n      'drupal cr all',\n    ],\n    dev: false, // Runs on EVERY rebuild\n  }),\n],  Now you have active Drupal development-mode compilation and cache clearing by just running:  npm run dev:drupal  You can still work in Pattern Lab while also working in Drupal by also running in another terminal:  npm start  Just like in the regular Quickstart, when Webpack output appears, visit  http://0.0.0.0/pl  (or  http://localhost/pl ) to immediately start building and previewing your design system in Pattern Lab.", 
            "title": "Quickstart with Drupal 8"
        }, 
        {
            "location": "/getting-started/commands/", 
            "text": "Start up watches and a local server for Pattern Lab in dev mode. All assets will be served very fast from memory:\n\n\nnpm start # An alias for npm run dev:pl\n\n\n\n\nStart up watches and compile assets to disk for Drupal on changes (see above for enabling Drupal cache clears as part of this):\n\n\nnpm run dev:drupal\n\n\n\n\nCompile production assets for Pattern Lab (e.g. for a static file host):\n\n\nnpm run build:pl\n\n\n\n\nCompile production assets for Drupal\n\n\nnpm run build:drupal\n\n\n\n\nCompile production assets for Grav\n\n\nnpm run build:grav\n\n\n\n\nReinstall and setup Pattern Lab\n\n\nnpm run setup\n\n\n\n\nRun all linters:\n\n\nnpm run lint\n\n\n\n\nRun only Javascript linters:\n\n\nnpm run lint:js\n\n\n\n\nRun only Sass linters:\n\n\nnpm run lint:scss\n\n\n\n\nRun all tests:\n\n\nnpm test\n\n\n\n\nRun only unit test:\n\n\nnpm run test:unit\n\n\n\n\nRun only pa11y accessibility tests:\n\n\nnpm run test:pa11y\n\n\n\n\nRun Yeoman generator to make new component:\n\n\nnpm run new\n\n\n\n\nRun any Gulp task:\n\n\n# See gulpfile.js for gulp tasks\nnpm run gulp -- gulpTaskName\n# For instance, running a full Pattern Lab compile\nnpm run gulp -- compile", 
            "title": "Commands"
        }, 
        {
            "location": "/architecture/folders/", 
            "text": "Structure\n\n\nThe following are significant items at the root level:\n\n\n# ./\n.\n\u251c\u2500\u2500 apps                           # Things that use the compiled design system. Drupal theme \n PL\n\u251c\u2500\u2500 dist                           # Bundled output: CSS, js, images, app artifacts (like PL html)\n\u251c\u2500\u2500 source                         # The design system. All assets compiled to dist/\n\u251c\u2500\u2500 tools                          # Gulp plugins and node tools\n\u251c\u2500\u2500 gulpfile.js                    # Defines the few tasks required in the workflow\n\u251c\u2500\u2500 webpack.particle.dev.js        # Shared bundle configuration for all dev entry points\n\u251c\u2500\u2500 webpack.particle.prod.js       # Shared bundle configuration for all prod entry points\n\u2514\u2500\u2500 ...                            # Mostly just config\n\n\n\nSource structure\n\n\nsource/\n holds all assets for the design system and looks like this:\n\n\n# ./source/\n.\n\u251c\u2500\u2500 _patterns                      # All assets live within an Atomic \"pattern\"\n\u2502   \u251c\u2500\u2500 01-atoms                   # Twig namespace: @atoms, JS/Sass namespace: atoms\n\u2502   \u2502   \u251c\u2500\u2500 button                 # For instance, the button atom\n\u2502   \u2502   \u2502    \u251c\u2500\u2500 __tests__         # Jest javascript unit tests\n\u2502   \u2502   \u2502    \u251c\u2500\u2500 demo              # Patterns feature a demo folder to show implementation\n\u2502   \u2502   \u2502    \u2502   \u251c\u2500\u2500 index.js      # Pulls in twig, yaml, md inside demo/ so webpack is aware\n\u2502   \u2502   \u2502    \u2502   \u251c\u2500\u2500 buttons.twig  # Demonstrate with a plural name, visible to PL since no underscore\n\u2502   \u2502   \u2502    \u2502   \u2514\u2500\u2500 buttons.yml   # Data provided to the demo pattern\n\u2502   \u2502   \u2502    \u251c\u2500\u2500 _button.scss      # Most components require styles, underscore required\n\u2502   \u2502   \u2502    \u251c\u2500\u2500 _button.twig      # The pure component template, underscore required\n\u2502   \u2502   \u2502    \u2514\u2500\u2500 index.js          # Component entry point (See \"Anatomy of a Component below)\n\u2502   \u2502   \u2514\u2500\u2500 ...                    # Other @atoms\n\u2502   \u2514\u2500\u2500 ...                        # @protons, @atoms, @molecules, @organisms, @templates, @pages\n\u2514\u2500\u2500 design-system.js               # The ultimate importer/exporter of the design system pieces\n\n\n\n\n\nThe design system is \nconsumed by\n \"apps\". The three apps included are a Drupal theme, Grav theme, and a Pattern Lab installation.\n\n\n\n\nApp structure\n\n\napps/pl/\n holds the \nentry point\n for all Pattern Lab assets, as well as the PHP engine:\n\n\n# ./app/pl/\n.\n\u251c\u2500\u2500 pattern-lab/                   # Holds the Pattern Lab installation\n\u2502   \u251c\u2500\u2500 ...                        # composer.json, config, console php, ...\n\u251c\u2500\u2500 scss                           # PL-only Sass; styles that shoudln't junk up the design system\n\u2502   \u251c\u2500\u2500 _scss2json.scss            # Output certain Sass variables into json for demo in PL\n\u2502   \u2514\u2500\u2500 _styleguide.scss           # Custom PL UI styles\n\u251c\u2500\u2500 demo                           # Holds things related to just \"demos\" for the design system\n\u2502   \u2514\u2500\u2500 demos.glob                 # Special file used by webpack to \"glob\" all demos within source/\n\u251c\u2500\u2500 webpack.pl.shared.js           # Webpack config shared between PL dev and PL prod\n\u251c\u2500\u2500 webpack.pl.dev.js              # Webpack config unique to dev, or that overrides shared\n\u251c\u2500\u2500 webpack.pl.prod.js             # Webpack config unique to prod, or that overrides shared\n\u2514\u2500\u2500 index.js                       # Imports and applies the design system to a bundle for PL\n\n\n\napps/drupal/\n holds the \nentry point\n for all Drupal 8 theme assets, as well as templates, yml, etc:\n\n\n# ./app/drupal/\n.\n\u251c\u2500\u2500 scss/                          # Theme-only Sass, tweaks to Drupalisms that need not be in the DS\n\u2502   \u2514\u2500\u2500 _drupal-styles.scss        # Add more drupal styles here, like _views.scss, _field.scss etc\n\u251c\u2500\u2500 templates                      # Templates integrate Drupal data with design system patterns\n\u2502   \u251c\u2500\u2500 block.html.twig            # Example Drupal template integrating, say @molecules/_card.twig\n\u2502   \u2514\u2500\u2500 ...                        # There wil be many Drupal templates\n\u251c\u2500\u2500 index.js                       # Imports and applies the design system to a bundle for Drupal\n\u251c\u2500\u2500 particle.info.yml              # Theme information. DS namespaces are auto-injected!\n\u251c\u2500\u2500 particle.libraries.yml         # The output js and css bundles are included here\n\u251c\u2500\u2500 particle.theme                 # Drupal preprocess functions\n\u251c\u2500\u2500 webpack.drupal.shared.js       # Webpack config shared between drupal dev and drupal prod\n\u251c\u2500\u2500 webpack.drupal.dev.js          # Webpack config unique to dev, or that overrides shared\n\u251c\u2500\u2500 webpack.drupal.prod.js         # Webpack config unique to prod, or that overrides shared\n\u2514\u2500\u2500 index.js                       # Imports and applies the design system to a bundle for Drupal\n\n\n\nAtomic Design and Namespaces\n\n\n\"Namespaces\" are simply aliases to paths on a file system. The design system within \nsource/\n adheres strongly to \nAtomic Design\n, with \n@protons\n added on.\n\n\n\n\n\n\n\n\nPath\n\n\nTwig\n\n\nJavascript\n\n\nSass\n\n\n\n\n\n\n\n\n\n\nsource/_patterns/00-protons/\n\n\n@protons\n\n\nprotons\n\n\nTBD\n\n\n\n\n\n\nsource/_patterns/01-atoms/\n\n\n@atoms\n\n\natoms\n\n\nTBD\n\n\n\n\n\n\nsource/_patterns/02-molecules/\n\n\n@molecules\n\n\nmolcules\n\n\nTBD\n\n\n\n\n\n\nsource/_patterns/03-organisms/\n\n\n@organisms\n\n\norganisms\n\n\nTBD\n\n\n\n\n\n\nsource/_patterns/04-templates/\n\n\n@templates\n\n\ntemplates\n\n\nTBD\n\n\n\n\n\n\nsource/_patterns/05-pages/\n\n\n@pages\n\n\npages\n\n\nTBD\n\n\n\n\n\n\n\n\n\n\nNote: Namespaces within Sass are a work in progress!\n\n\n\n\nOur reasoning for categorization of components within each is pretty close to pure Atomic Design principals, but here's a quick explanation.\n\n\n\n\n\n\nProtons\n features Sass systems and non-consumable pattern markup. No Twig file will \n@include\n anything from \n@protons\n, but javascript and Sass will. This is a uniquely Particle convention.\n\n\n\n\n\n\nAtoms\n upward \nwill\n be included in other Twig files.\n\n\n\n\n\"Atoms of our interfaces serve as the foundational building blocks that comprise all our user interfaces. These atoms include basic HTML elements like form labels, inputs, buttons, and others that can\u2019t be broken down any further without ceasing to be functional. \nSource.\n\n\n\n\n\n\n\n\nMolecules\n are more complex widgets that must at least include an atom and sometimes other molecules.\n\n\n\n\n\"In interfaces, molecules are relatively simple groups of UI elements functioning together as a unit. For example, a form label, search input, and button can join together to create a search form molecule.\" \nSource.\n\n\n\n\n\n\n\n\nOrganisms\n feature atoms, molecules, and even other organisms (sparingly). Think headers, footers, blog rolls.\n\n\n\n\n\"Organisms are relatively complex UI components composed of groups of molecules and/or atoms and/or other organisms.\" \nSource.\n\n\n\n\n\n\n\n\nTemplates\n are page layouts, giving us a view into how content can possibly be laid out.\n\n\n\n\n\"Templates are page-level objects that place components into a layout and articulate the design\u2019s underlying content structure.\" \nSource.\n\n\n\n\n\n\n\n\nPages\n can be considered full \"prototypes\" of a design systgem, with real content, images, etc.\n\n\n\n\n\"Pages are specific instances of templates that show what a UI looks like with real representative content in place.\" \nSource.", 
            "title": "Folder Structure"
        }, 
        {
            "location": "/architecture/folders/#structure", 
            "text": "The following are significant items at the root level:  # ./\n.\n\u251c\u2500\u2500 apps                           # Things that use the compiled design system. Drupal theme   PL\n\u251c\u2500\u2500 dist                           # Bundled output: CSS, js, images, app artifacts (like PL html)\n\u251c\u2500\u2500 source                         # The design system. All assets compiled to dist/\n\u251c\u2500\u2500 tools                          # Gulp plugins and node tools\n\u251c\u2500\u2500 gulpfile.js                    # Defines the few tasks required in the workflow\n\u251c\u2500\u2500 webpack.particle.dev.js        # Shared bundle configuration for all dev entry points\n\u251c\u2500\u2500 webpack.particle.prod.js       # Shared bundle configuration for all prod entry points\n\u2514\u2500\u2500 ...                            # Mostly just config", 
            "title": "Structure"
        }, 
        {
            "location": "/architecture/folders/#source-structure", 
            "text": "source/  holds all assets for the design system and looks like this:  # ./source/\n.\n\u251c\u2500\u2500 _patterns                      # All assets live within an Atomic \"pattern\"\n\u2502   \u251c\u2500\u2500 01-atoms                   # Twig namespace: @atoms, JS/Sass namespace: atoms\n\u2502   \u2502   \u251c\u2500\u2500 button                 # For instance, the button atom\n\u2502   \u2502   \u2502    \u251c\u2500\u2500 __tests__         # Jest javascript unit tests\n\u2502   \u2502   \u2502    \u251c\u2500\u2500 demo              # Patterns feature a demo folder to show implementation\n\u2502   \u2502   \u2502    \u2502   \u251c\u2500\u2500 index.js      # Pulls in twig, yaml, md inside demo/ so webpack is aware\n\u2502   \u2502   \u2502    \u2502   \u251c\u2500\u2500 buttons.twig  # Demonstrate with a plural name, visible to PL since no underscore\n\u2502   \u2502   \u2502    \u2502   \u2514\u2500\u2500 buttons.yml   # Data provided to the demo pattern\n\u2502   \u2502   \u2502    \u251c\u2500\u2500 _button.scss      # Most components require styles, underscore required\n\u2502   \u2502   \u2502    \u251c\u2500\u2500 _button.twig      # The pure component template, underscore required\n\u2502   \u2502   \u2502    \u2514\u2500\u2500 index.js          # Component entry point (See \"Anatomy of a Component below)\n\u2502   \u2502   \u2514\u2500\u2500 ...                    # Other @atoms\n\u2502   \u2514\u2500\u2500 ...                        # @protons, @atoms, @molecules, @organisms, @templates, @pages\n\u2514\u2500\u2500 design-system.js               # The ultimate importer/exporter of the design system pieces   The design system is  consumed by  \"apps\". The three apps included are a Drupal theme, Grav theme, and a Pattern Lab installation.", 
            "title": "Source structure"
        }, 
        {
            "location": "/architecture/folders/#app-structure", 
            "text": "apps/pl/  holds the  entry point  for all Pattern Lab assets, as well as the PHP engine:  # ./app/pl/\n.\n\u251c\u2500\u2500 pattern-lab/                   # Holds the Pattern Lab installation\n\u2502   \u251c\u2500\u2500 ...                        # composer.json, config, console php, ...\n\u251c\u2500\u2500 scss                           # PL-only Sass; styles that shoudln't junk up the design system\n\u2502   \u251c\u2500\u2500 _scss2json.scss            # Output certain Sass variables into json for demo in PL\n\u2502   \u2514\u2500\u2500 _styleguide.scss           # Custom PL UI styles\n\u251c\u2500\u2500 demo                           # Holds things related to just \"demos\" for the design system\n\u2502   \u2514\u2500\u2500 demos.glob                 # Special file used by webpack to \"glob\" all demos within source/\n\u251c\u2500\u2500 webpack.pl.shared.js           # Webpack config shared between PL dev and PL prod\n\u251c\u2500\u2500 webpack.pl.dev.js              # Webpack config unique to dev, or that overrides shared\n\u251c\u2500\u2500 webpack.pl.prod.js             # Webpack config unique to prod, or that overrides shared\n\u2514\u2500\u2500 index.js                       # Imports and applies the design system to a bundle for PL  apps/drupal/  holds the  entry point  for all Drupal 8 theme assets, as well as templates, yml, etc:  # ./app/drupal/\n.\n\u251c\u2500\u2500 scss/                          # Theme-only Sass, tweaks to Drupalisms that need not be in the DS\n\u2502   \u2514\u2500\u2500 _drupal-styles.scss        # Add more drupal styles here, like _views.scss, _field.scss etc\n\u251c\u2500\u2500 templates                      # Templates integrate Drupal data with design system patterns\n\u2502   \u251c\u2500\u2500 block.html.twig            # Example Drupal template integrating, say @molecules/_card.twig\n\u2502   \u2514\u2500\u2500 ...                        # There wil be many Drupal templates\n\u251c\u2500\u2500 index.js                       # Imports and applies the design system to a bundle for Drupal\n\u251c\u2500\u2500 particle.info.yml              # Theme information. DS namespaces are auto-injected!\n\u251c\u2500\u2500 particle.libraries.yml         # The output js and css bundles are included here\n\u251c\u2500\u2500 particle.theme                 # Drupal preprocess functions\n\u251c\u2500\u2500 webpack.drupal.shared.js       # Webpack config shared between drupal dev and drupal prod\n\u251c\u2500\u2500 webpack.drupal.dev.js          # Webpack config unique to dev, or that overrides shared\n\u251c\u2500\u2500 webpack.drupal.prod.js         # Webpack config unique to prod, or that overrides shared\n\u2514\u2500\u2500 index.js                       # Imports and applies the design system to a bundle for Drupal", 
            "title": "App structure"
        }, 
        {
            "location": "/architecture/folders/#atomic-design-and-namespaces", 
            "text": "\"Namespaces\" are simply aliases to paths on a file system. The design system within  source/  adheres strongly to  Atomic Design , with  @protons  added on.     Path  Twig  Javascript  Sass      source/_patterns/00-protons/  @protons  protons  TBD    source/_patterns/01-atoms/  @atoms  atoms  TBD    source/_patterns/02-molecules/  @molecules  molcules  TBD    source/_patterns/03-organisms/  @organisms  organisms  TBD    source/_patterns/04-templates/  @templates  templates  TBD    source/_patterns/05-pages/  @pages  pages  TBD      Note: Namespaces within Sass are a work in progress!   Our reasoning for categorization of components within each is pretty close to pure Atomic Design principals, but here's a quick explanation.    Protons  features Sass systems and non-consumable pattern markup. No Twig file will  @include  anything from  @protons , but javascript and Sass will. This is a uniquely Particle convention.    Atoms  upward  will  be included in other Twig files.   \"Atoms of our interfaces serve as the foundational building blocks that comprise all our user interfaces. These atoms include basic HTML elements like form labels, inputs, buttons, and others that can\u2019t be broken down any further without ceasing to be functional.  Source.     Molecules  are more complex widgets that must at least include an atom and sometimes other molecules.   \"In interfaces, molecules are relatively simple groups of UI elements functioning together as a unit. For example, a form label, search input, and button can join together to create a search form molecule.\"  Source.     Organisms  feature atoms, molecules, and even other organisms (sparingly). Think headers, footers, blog rolls.   \"Organisms are relatively complex UI components composed of groups of molecules and/or atoms and/or other organisms.\"  Source.     Templates  are page layouts, giving us a view into how content can possibly be laid out.   \"Templates are page-level objects that place components into a layout and articulate the design\u2019s underlying content structure.\"  Source.     Pages  can be considered full \"prototypes\" of a design systgem, with real content, images, etc.   \"Pages are specific instances of templates that show what a UI looks like with real representative content in place.\"  Source.", 
            "title": "Atomic Design and Namespaces"
        }, 
        {
            "location": "/architecture/components/", 
            "text": "Generating a Component\n\n\nComponents have a specific file structure. Instead of making a developer create all required files by hand, we use a \nYeoman\n generator to easily create new component folders. Simply run:\n\n\nnpm run new\n\n\n\n\nFollow the onscreen prompts for the location, included files, and name of the new component. \nThen make sure you edit \nsource/design-system.js\n and add your new component.\n\n\nAnatomy of a Component\n\n\nAll components require a set of files:\n\n\n# ./source/_patterns/01-atoms/button/\n.\n\u251c\u2500\u2500 __tests__                      # Jest unit tests. Read automatically during `npm run test:unit`\n\u2502   \u2514\u2500\u2500 button.test.js             # Unit test JS functions. Limited DOM manipulation\n\u251c\u2500\u2500 demo                           # Demo implementations, can be removed on deploy to prod\n\u2502   \u251c\u2500\u2500 index.js                   # Pulls in twig, yaml, md inside demo/ so webpack is aware\n\u2502   \u251c\u2500\u2500 buttons.md                 # Markdown with extra notes, visible in PL UI\n\u2502   \u251c\u2500\u2500 buttons.twig               # Demonstrate with a plural name, visible to PL since no underscore\n\u2502   \u2514\u2500\u2500 buttons.yml                # Data provided to the demo pattern\n\u251c\u2500\u2500 _button.scss                   # Most components require styles, underscore required\n\u251c\u2500\u2500 _button.twig                   # The pure component template, \"_\" required to hide from PL UI\n\u2514\u2500\u2500 index.js                       # Component entry point\n\n\n\nWith the power of \nWebpack\n, all static assets a component needs are \nimport\ned right into the \nindex.js\n \nentry point\n alongside the javascript methods:\n\n\n// source/_patterns/01-atoms/button/index.js\n\n// Import *EVERY* NPM dependency.\nimport $ from 'jquery';\n// Import specific plugins this component may need\nimport 'bootstrap/js/src/button';\n\n// source/_patterns/01-atoms/00-protons/index.js\nimport 'protons';\n\n// Module template. Changes to this file trigger a PL rebuild\nimport './_button.twig';\n\n// Import local Sass (which in turn imports Bootstrap Sass)\nimport './_button.scss';\n\n// Requirement 1 of a component: name\nexport const name = 'button';\n\n// Requirement 2 of a component: disable function\nexport function disable() {}\n\n// Requirement 3 of a component: enable function. `$context` is `$(document)` in PL, and `context` in Drupal\nexport function enable($context) {\n\n  // `.button()` is only available because of `import 'bootstrap/js/src/button';` above\n  $('#blah', $context).button('toggle');\n}\n\n// Req. 4 of a component: default export is the enable function\nexport default enable;", 
            "title": "Component Structure"
        }, 
        {
            "location": "/architecture/components/#generating-a-component", 
            "text": "Components have a specific file structure. Instead of making a developer create all required files by hand, we use a  Yeoman  generator to easily create new component folders. Simply run:  npm run new  Follow the onscreen prompts for the location, included files, and name of the new component.  Then make sure you edit  source/design-system.js  and add your new component.", 
            "title": "Generating a Component"
        }, 
        {
            "location": "/architecture/components/#anatomy-of-a-component", 
            "text": "All components require a set of files:  # ./source/_patterns/01-atoms/button/\n.\n\u251c\u2500\u2500 __tests__                      # Jest unit tests. Read automatically during `npm run test:unit`\n\u2502   \u2514\u2500\u2500 button.test.js             # Unit test JS functions. Limited DOM manipulation\n\u251c\u2500\u2500 demo                           # Demo implementations, can be removed on deploy to prod\n\u2502   \u251c\u2500\u2500 index.js                   # Pulls in twig, yaml, md inside demo/ so webpack is aware\n\u2502   \u251c\u2500\u2500 buttons.md                 # Markdown with extra notes, visible in PL UI\n\u2502   \u251c\u2500\u2500 buttons.twig               # Demonstrate with a plural name, visible to PL since no underscore\n\u2502   \u2514\u2500\u2500 buttons.yml                # Data provided to the demo pattern\n\u251c\u2500\u2500 _button.scss                   # Most components require styles, underscore required\n\u251c\u2500\u2500 _button.twig                   # The pure component template, \"_\" required to hide from PL UI\n\u2514\u2500\u2500 index.js                       # Component entry point  With the power of  Webpack , all static assets a component needs are  import ed right into the  index.js   entry point  alongside the javascript methods:  // source/_patterns/01-atoms/button/index.js\n\n// Import *EVERY* NPM dependency.\nimport $ from 'jquery';\n// Import specific plugins this component may need\nimport 'bootstrap/js/src/button';\n\n// source/_patterns/01-atoms/00-protons/index.js\nimport 'protons';\n\n// Module template. Changes to this file trigger a PL rebuild\nimport './_button.twig';\n\n// Import local Sass (which in turn imports Bootstrap Sass)\nimport './_button.scss';\n\n// Requirement 1 of a component: name\nexport const name = 'button';\n\n// Requirement 2 of a component: disable function\nexport function disable() {}\n\n// Requirement 3 of a component: enable function. `$context` is `$(document)` in PL, and `context` in Drupal\nexport function enable($context) {\n\n  // `.button()` is only available because of `import 'bootstrap/js/src/button';` above\n  $('#blah', $context).button('toggle');\n}\n\n// Req. 4 of a component: default export is the enable function\nexport default enable;", 
            "title": "Anatomy of a Component"
        }, 
        {
            "location": "/architecture/config/", 
            "text": "Configuration\n\n\nA small \nconfig.js\n file at the root of the project provides basic path settings. Developers are encouraged to edit the Gulp and Webpack files directly to suit their needs.\n\n\nWebpack\n\n\nWebpack\n does the heavy lifting of assets compilation and transformation. Webpack allows importing of Sass, images, fonts, and other assets into javascript files, bundling output files like CSS and javascript. Note the two webpack files at the root of the project:\n\n\n\n\nwebpack.particle.dev.js\n: Development settings shared amongst all consuming apps.\n\n\nwebpack.particle.prod.js\n: Production settings shared amongst all the consuming app.\n\n\n\n\nEach app features three webpack files. Take for example, the \npl\n app:\n\n\n\n\nwebpack.pl.shared.js\n: Config shared by prod and dev\n\n\nwebpack.pl.prod.js\n: Production-only config merged over the top of \nwebpack.pl.shared.js\n and \nwebpack.particle.prod.js\n (from root)\n\n\nwebpack.pl.dev.js\n: Development-only config merged over the top of \nwebpack.pl.shared.js\n and \nwebpack.particle.dev.js\n (from root)\n\n\n\n\nYou are encouraged to read through all three files to understand how assets are parsed and prepared.\n\n\nDrupal theme config\n\n\nThe Drupal theme config is located at \napps/drupal\n. Look for the usual \n.info.yml\n, \n.libraries.yml\n, and \n.theme\n files.\n\n\nPattern Lab config\n\n\nThe Pattern Lab config file is located at \napps/pl/pattern-lab/config/config.yml\n.", 
            "title": "Config Structure"
        }, 
        {
            "location": "/architecture/config/#configuration", 
            "text": "A small  config.js  file at the root of the project provides basic path settings. Developers are encouraged to edit the Gulp and Webpack files directly to suit their needs.", 
            "title": "Configuration"
        }, 
        {
            "location": "/architecture/config/#webpack", 
            "text": "Webpack  does the heavy lifting of assets compilation and transformation. Webpack allows importing of Sass, images, fonts, and other assets into javascript files, bundling output files like CSS and javascript. Note the two webpack files at the root of the project:   webpack.particle.dev.js : Development settings shared amongst all consuming apps.  webpack.particle.prod.js : Production settings shared amongst all the consuming app.   Each app features three webpack files. Take for example, the  pl  app:   webpack.pl.shared.js : Config shared by prod and dev  webpack.pl.prod.js : Production-only config merged over the top of  webpack.pl.shared.js  and  webpack.particle.prod.js  (from root)  webpack.pl.dev.js : Development-only config merged over the top of  webpack.pl.shared.js  and  webpack.particle.dev.js  (from root)   You are encouraged to read through all three files to understand how assets are parsed and prepared.", 
            "title": "Webpack"
        }, 
        {
            "location": "/architecture/config/#drupal-theme-config", 
            "text": "The Drupal theme config is located at  apps/drupal . Look for the usual  .info.yml ,  .libraries.yml , and  .theme  files.", 
            "title": "Drupal theme config"
        }, 
        {
            "location": "/architecture/config/#pattern-lab-config", 
            "text": "The Pattern Lab config file is located at  apps/pl/pattern-lab/config/config.yml .", 
            "title": "Pattern Lab config"
        }, 
        {
            "location": "/dev/coding/", 
            "text": "IDE/Text Editor Setup\n\n\nInstall an \nEditorConfig\n plugin for Particle coding conventions.\n\n\n\n\nVSCode\n\n\nJetBrains (*Storm)\n\n\nAtom\n\n\nSublime Text", 
            "title": "Coding"
        }, 
        {
            "location": "/dev/coding/#idetext-editor-setup", 
            "text": "Install an  EditorConfig  plugin for Particle coding conventions.   VSCode  JetBrains (*Storm)  Atom  Sublime Text", 
            "title": "IDE/Text Editor Setup"
        }, 
        {
            "location": "/dev/bundling/", 
            "text": "Assets\n\n\nAssets are \"static\" files that make up all clientside applications. Examples of static assets are:\n\n\n\n\nCSS\n\n\nJavascript bundles\n\n\n.map files for debugging CSS and Javascript\n\n\nFont files\n\n\nJPEG, PNG, GIF, and SVG images\n\n\nfavicons\n\n\n\n\n\n\nAssets are compiled to the dist/ folder if they are \n@import\n'd in some file within the dependency chain of your app. Only files within dist/ are available to be served to your apps.\n\n\n\n\nWe include .twig files on the dependency chain to assist webpack's file watching.\n\n\n\"Dependency Chain\"\n\n\nParticle takes a modern approach to asset management through Webpack. Instead of files spread around a project that have to be referenced individually on the client side, apps now have entry point javascript files that \n@import\n dependencies that \n@import\n dependencies that \n@import\n dependencies and so on.\n\n\nUsing Webpack to \nbundle\n this dependency chain up into as few output files as possible to the \ndist/\n directory means we have a \nsource/\n (and \napps/\n) folder that is structured the way we want to work, with a consistent output.\n\n\nConsider this dependency chain for the \napps/pl\n app:\n\n\n                                                     \n- @protons\n                                                     \n- jquery\n                                                     \n- bootstrap/src/js/buttons\n                                \n- @atoms/button     \n- _button.scss\n                                                     \n- @protons\n                                                     \n- jquery\n                                                     \n- bootstrap/src/js/cards\napps/pl \n- source/design-system \n- @molecules/card   \n- _card.scss\n                                                     \n- @protons\n                                                     \n- bootstrap/src/js/jumbotron\n                                \n- @organisms/header \n- _header.scss\n\n\n\nEven though \n@protons\n and \njquery\n are included multiple times, webpack removes this duplication as it treeshakes for the compiled bundle. The amount of common chunks and vendor-only bundles generated can be configured in the root \nwebpack.particle.*.js\n configs.\n\n\nWebpack dev server\n\n\nRunning \nnpm start\n compiles Pattern Lab, then starts a \nhot reloading\n webpack dev server, then injects assets into the Pattern Lab. All static html files generated by Pattern Lab will be served at \nhttp://0.0.0.0/pl\n and all modifications to assets on the dependency chain will be automatically injected into the browser. This means that you can work on Sass and javascript, the bundle will recompile, and the browser will reload rapidly.\n\n\nDev server config can be found inside of \nparticle/apps/pl/webpack.pl.dev.js", 
            "title": "Bundling"
        }, 
        {
            "location": "/dev/bundling/#assets", 
            "text": "Assets are \"static\" files that make up all clientside applications. Examples of static assets are:   CSS  Javascript bundles  .map files for debugging CSS and Javascript  Font files  JPEG, PNG, GIF, and SVG images  favicons    Assets are compiled to the dist/ folder if they are  @import 'd in some file within the dependency chain of your app. Only files within dist/ are available to be served to your apps.   We include .twig files on the dependency chain to assist webpack's file watching.", 
            "title": "Assets"
        }, 
        {
            "location": "/dev/bundling/#dependency-chain", 
            "text": "Particle takes a modern approach to asset management through Webpack. Instead of files spread around a project that have to be referenced individually on the client side, apps now have entry point javascript files that  @import  dependencies that  @import  dependencies that  @import  dependencies and so on.  Using Webpack to  bundle  this dependency chain up into as few output files as possible to the  dist/  directory means we have a  source/  (and  apps/ ) folder that is structured the way we want to work, with a consistent output.  Consider this dependency chain for the  apps/pl  app:                                                        - @protons\n                                                      - jquery\n                                                      - bootstrap/src/js/buttons\n                                 - @atoms/button      - _button.scss\n                                                      - @protons\n                                                      - jquery\n                                                      - bootstrap/src/js/cards\napps/pl  - source/design-system  - @molecules/card    - _card.scss\n                                                      - @protons\n                                                      - bootstrap/src/js/jumbotron\n                                 - @organisms/header  - _header.scss  Even though  @protons  and  jquery  are included multiple times, webpack removes this duplication as it treeshakes for the compiled bundle. The amount of common chunks and vendor-only bundles generated can be configured in the root  webpack.particle.*.js  configs.", 
            "title": "\"Dependency Chain\""
        }, 
        {
            "location": "/dev/bundling/#webpack-dev-server", 
            "text": "Running  npm start  compiles Pattern Lab, then starts a  hot reloading  webpack dev server, then injects assets into the Pattern Lab. All static html files generated by Pattern Lab will be served at  http://0.0.0.0/pl  and all modifications to assets on the dependency chain will be automatically injected into the browser. This means that you can work on Sass and javascript, the bundle will recompile, and the browser will reload rapidly.  Dev server config can be found inside of  particle/apps/pl/webpack.pl.dev.js", 
            "title": "Webpack dev server"
        }, 
        {
            "location": "/dev/task-running/", 
            "text": "Gulp\n\n\nGulp 4 is used to run a small set of tasks that can't be accomplished by Webpack alone. Examine \ngulpfile.js\n for all tasks available. Feel free to edit and add tasks to this file.\n\n\nGulp 4 is used and the \nnpm run\n commands above basically trigger gulp without having to install a global dependency. If you want to run specific gulp tasks, run \nnpm run gulp -- TASKNAME\n. The \n--\n passes whatever comes after to the \ngulp\n command. Run \nnpm run gulp -- --tasks\n to see the whole list, here's some examples of what you can do:\n\n\n\n\nnpm run gulp -- --help\n - See the help menu\n\n\nnpm run gulp -- compile\n - Compile Pattern Lab\n\n\n\n\nFor more info on Gulp:\n\n\n\n\nGulp 4 Docs\n\n\nGulp 4 Readme", 
            "title": "Task Running"
        }, 
        {
            "location": "/dev/task-running/#gulp", 
            "text": "Gulp 4 is used to run a small set of tasks that can't be accomplished by Webpack alone. Examine  gulpfile.js  for all tasks available. Feel free to edit and add tasks to this file.  Gulp 4 is used and the  npm run  commands above basically trigger gulp without having to install a global dependency. If you want to run specific gulp tasks, run  npm run gulp -- TASKNAME . The  --  passes whatever comes after to the  gulp  command. Run  npm run gulp -- --tasks  to see the whole list, here's some examples of what you can do:   npm run gulp -- --help  - See the help menu  npm run gulp -- compile  - Compile Pattern Lab   For more info on Gulp:   Gulp 4 Docs  Gulp 4 Readme", 
            "title": "Gulp"
        }, 
        {
            "location": "/dev/linting/", 
            "text": "\"It's going to hurt your feelings.\"\n\n\nBoth linters can be disabled per-line/per-section/per-file if need be, check their respective docs for info.\n\n\nJavascript Linting\n\n\nJavascript linting generally follows the AirBnB standards, with some extras to help out Webpack and Jest.\nTo make changes to the default rules, edit \n.eslintrc.js\n \n\n\neslint docs\n\n\nStyle Linting\n\n\nSass linting defaults to Phase2's blend of sane house rules, but can be edited to whatever your project requires.\nTo make changes to the default rules, edit \n.stylelintrc\n\n\nstylelint docs", 
            "title": "Linting"
        }, 
        {
            "location": "/dev/linting/#javascript-linting", 
            "text": "Javascript linting generally follows the AirBnB standards, with some extras to help out Webpack and Jest.\nTo make changes to the default rules, edit  .eslintrc.js    eslint docs", 
            "title": "Javascript Linting"
        }, 
        {
            "location": "/dev/linting/#style-linting", 
            "text": "Sass linting defaults to Phase2's blend of sane house rules, but can be edited to whatever your project requires.\nTo make changes to the default rules, edit  .stylelintrc  stylelint docs", 
            "title": "Style Linting"
        }, 
        {
            "location": "/dev/testing/", 
            "text": "Particle provides the starting point for various types of testing. Tests are located under the tools directory:\n\n\n# ./particle/\n.\n\u251c\u2500\u2500 tools/\n\u2502   \u251c\u2500\u2500 tasks/\n\u2502   \u2514\u2500\u2500 tests/\n\u2502   \u2502   \u2514\u2500\u2500 accessibility/\n\u2502   \u2502   \u2514\u2500\u2500 unit/\n\u2502   \u2502   \u2514\u2500\u2500 vrt/\n\u2502   \u2514\u2500\u2500 ...\n\u2514\u2500\u2500 ...\n\n\n\nUnit Testing\n\n\nParticle provides unit testing using \nJest\n.\n\n\nSimply run the following to run Jest tests against the design system:\n\n\nnpm run test:unit\n\n\n\n\nNote the \n__tests__\n folders within components for examples.\n\n\nWhen using the new component generator (\nnpm run new\n), a basic test will be generated for you. This initial test checks that it is correctly registered in the design system.\n\n\nAccessibility Testing\n\n\nTo run \npa11y\n accessibility testing on Pattern Lab rendered output, first you'll need to install the pa11y npm package:\n\n\nnpm install pa11y\n\n\n\n\nTo save these devDependencies to your project \npermanently\n, run the following instead:\n\n\nnpm install pa11y --save-dev\n\n\n\n\nThen whenever you want to run your tests, simply start the local Pattern Lab dev server in one session:\n\n\nnpm run start\n\n\n\n\nAnd the kick off the pa11y tests in another session:\n\n\nnpm run test:pa11y\n\n\n\n\nSee \n./tools/pa11y.js\n for configuration \noptions\n. Note the ignore options are for example only, add your needed updates to the options object. Add additional pages to the test via the \ntestPaths\n array.\n\n\nconst options = {\n  standard: 'WCAG2AAA',\n  ignore: [\n    'WCAG2AAA.Principle3.Guideline3_1.3_1_1.H57.2',\n  ],\n  log: {\n    debug: console.log,\n    error: console.error,\n    info: console.log,\n  },\n};\n\n\n\n\nVisual Regression Testing\n\n\nParticle does not include VRT out of the box, but there are plenty of great options out there depending on your needs. \nHere are some of our favorites, in alphabetical order:\n\n\n\n\nBackstopJS\n\n\nPhantomJS\n\n\nPuppeteer\n\n\nSlimerJS\n\n\nWebdriverIO", 
            "title": "Testing"
        }, 
        {
            "location": "/dev/testing/#unit-testing", 
            "text": "Particle provides unit testing using  Jest .  Simply run the following to run Jest tests against the design system:  npm run test:unit  Note the  __tests__  folders within components for examples.  When using the new component generator ( npm run new ), a basic test will be generated for you. This initial test checks that it is correctly registered in the design system.", 
            "title": "Unit Testing"
        }, 
        {
            "location": "/dev/testing/#accessibility-testing", 
            "text": "To run  pa11y  accessibility testing on Pattern Lab rendered output, first you'll need to install the pa11y npm package:  npm install pa11y  To save these devDependencies to your project  permanently , run the following instead:  npm install pa11y --save-dev  Then whenever you want to run your tests, simply start the local Pattern Lab dev server in one session:  npm run start  And the kick off the pa11y tests in another session:  npm run test:pa11y  See  ./tools/pa11y.js  for configuration  options . Note the ignore options are for example only, add your needed updates to the options object. Add additional pages to the test via the  testPaths  array.  const options = {\n  standard: 'WCAG2AAA',\n  ignore: [\n    'WCAG2AAA.Principle3.Guideline3_1.3_1_1.H57.2',\n  ],\n  log: {\n    debug: console.log,\n    error: console.error,\n    info: console.log,\n  },\n};", 
            "title": "Accessibility Testing"
        }, 
        {
            "location": "/dev/testing/#visual-regression-testing", 
            "text": "Particle does not include VRT out of the box, but there are plenty of great options out there depending on your needs. \nHere are some of our favorites, in alphabetical order:   BackstopJS  PhantomJS  Puppeteer  SlimerJS  WebdriverIO", 
            "title": "Visual Regression Testing"
        }, 
        {
            "location": "/apps/general/", 
            "text": "Particle features \"apps\" which simply consume the design system in \nsource/\n and then present it according to their needs. \n\n\nAdding or Removing Apps\n\n\nParticle makes adding or removing apps a snap! By default Particle has a Pattern Lab installation, a Drupal theme, and a Grav theme included. But these can be added to, removed, or changed easily. If you'd like to make changes, see these pieces:\n\n\n\n\nmodule.exports\n in \nconfig.js\n\n\nPath imports in \ngulpfile.js\n\n\nIf the app is twig-based, \ntwigNamespaces\n task in \ngulpfile.js\n\n\ndev\n and \nbuild\n scripts in \npackage.json\n\n\nAdd or delete App folder under \n/apps\n\n\nSpecial: to remove Grav, delete \nparticle.yaml", 
            "title": "General"
        }, 
        {
            "location": "/apps/general/#adding-or-removing-apps", 
            "text": "Particle makes adding or removing apps a snap! By default Particle has a Pattern Lab installation, a Drupal theme, and a Grav theme included. But these can be added to, removed, or changed easily. If you'd like to make changes, see these pieces:   module.exports  in  config.js  Path imports in  gulpfile.js  If the app is twig-based,  twigNamespaces  task in  gulpfile.js  dev  and  build  scripts in  package.json  Add or delete App folder under  /apps  Special: to remove Grav, delete  particle.yaml", 
            "title": "Adding or Removing Apps"
        }, 
        {
            "location": "/apps/drupal/", 
            "text": "apps/drupal/\n\n\n(REVAMP) - templates/ - Drupal twig templates. These often will \ninclude\n, \nembed\n, or \nextend\n the Twig templates found in Pattern Lab like this: \n{% include \"@molecules/branding/branding.twig\" with { url: path('\nfront\n') } %}\n. We keep the components in Pattern Lab \"pure\" and ignorant of Drupal's data model and use these templates to map the data between the two. Think of these as the Presenter templates in the \nModel View Presenter\n approach. Also, Drupal Twig templates that have nothing to do with Pattern Lab go here.\n\n\nDrupal integration of design system Twig files\n\n\nDrupal Twig templates in \ntemplates/\n can \n{% include %}\n, \n{% extends %}\n, and \n{% embed %}\n the Twig patterns within \nsource/_patterns/\n. See the \nAtomic Design and Namespaces\n section above for details, but implementing, say, an organism is pretty straightforward:\n\n\n{% include \n@organisms/path/to/file.twig\n with {\n  title: label,\n  imageUrl: field_name.raw.path,\n  largeCTA: true,\n} %}\n\n\n\n\n(Note: update this) For a demonstration in a sample codebase of how exactly to integrate templates, see the \ndrupal-lab\n repo; in particular note how both a \nnode teaser template\n and a \nviews field template\n in the Drupal \ntemplates/\n folder can embed the \ncard template\n from Pattern Lab while formatting the data.", 
            "title": "Drupal"
        }, 
        {
            "location": "/apps/drupal/#drupal-integration-of-design-system-twig-files", 
            "text": "Drupal Twig templates in  templates/  can  {% include %} ,  {% extends %} , and  {% embed %}  the Twig patterns within  source/_patterns/ . See the  Atomic Design and Namespaces  section above for details, but implementing, say, an organism is pretty straightforward:  {% include  @organisms/path/to/file.twig  with {\n  title: label,\n  imageUrl: field_name.raw.path,\n  largeCTA: true,\n} %}  (Note: update this) For a demonstration in a sample codebase of how exactly to integrate templates, see the  drupal-lab  repo; in particular note how both a  node teaser template  and a  views field template  in the Drupal  templates/  folder can embed the  card template  from Pattern Lab while formatting the data.", 
            "title": "Drupal integration of design system Twig files"
        }, 
        {
            "location": "/apps/pl/", 
            "text": "apps/pl/\n\n\nRefer to the \nPattern Lab Documentation\n for extensive info on how to use it. Particle is a custom Pattern Lab 2 \nEdition\n that is heavily influenced by the \nDrupal Edition of Pattern Lab\n and uses the Twig engine to bring it inline with Drupal 8's use of Twig.\n\n\nThe \napp/pl\n folder simply imports the design system from \nsource/\n and provides its own custom Sass for UI and json generation. Any Twig files that change in \nsource/\n cause a full Pattern Lab rebuild. The Pattern Lab engine and config lives within \napps/pl/pattern-lab\n.\n\n\nFaker\n data in Pattern Lab\n\n\nFaker\n generates fake data and the \nFaker plugin for Pattern Lab\n is used here. This generates \ndifferent\n fake content for each compile, and allows \ntranslated content\n as well.\n\n\nFaker only works in the global data files\n found in \nsource/_data/\n currently until \nthis bug\n is fixed.\n\n\nUse it like this in \nsource/_data/data.json\n:\n\n\n{\n  \ndescription\n: \nFaker.paragraph\n,\n  \ntext\n: \nFaker.words(3, true)\n,\n  \nbyline\n: \nFaker.sentence\n,\n  \nintro\n: \nFaker.sentences(2, true)\n\n}\n\n\n\n\nThe formatters (things like \n.paragraph\n, \n.words\n, etc) can accept options, when you see \nFaker.words(3, true)\n that means give me 3 random words and I'd like them as a string and not an array of strings. All the \nformatters and their options are documented here\n - there's tons: numbers, address, names, dates, and more.", 
            "title": "Pattern Lab"
        }, 
        {
            "location": "/apps/pl/#faker-data-in-pattern-lab", 
            "text": "Faker  generates fake data and the  Faker plugin for Pattern Lab  is used here. This generates  different  fake content for each compile, and allows  translated content  as well.  Faker only works in the global data files  found in  source/_data/  currently until  this bug  is fixed.  Use it like this in  source/_data/data.json :  {\n   description :  Faker.paragraph ,\n   text :  Faker.words(3, true) ,\n   byline :  Faker.sentence ,\n   intro :  Faker.sentences(2, true) \n}  The formatters (things like  .paragraph ,  .words , etc) can accept options, when you see  Faker.words(3, true)  that means give me 3 random words and I'd like them as a string and not an array of strings. All the  formatters and their options are documented here  - there's tons: numbers, address, names, dates, and more.", 
            "title": "Faker data in Pattern Lab"
        }, 
        {
            "location": "/apps/grav/", 
            "text": "apps/grav/\n\n\nGrav is a flat file CMS that uses Twig as a template engine. Learn more \nhere\n.\n\n\nGrav integration of design system Twig files\n\n\nWith the inclusion of the Grav plugin, \ntwig-namespaces\n, Grav Twig templates in \ntemplates/\n can \n{% include %}\n, \n{% extends %}\n, and \n{% embed %}\n the Twig patterns within \nsource/_patterns/\n. Similar to Drupal above, including these patterns is done as follows:\n\n\n{% include \n@organisms/path/to/file.twig\n with {\n  title: label,\n  imageUrl: field_name.raw.path,\n  largeCTA: true,\n} %}\n\n\n\n\nConfiguration for Grav and additional docs can found at \napps/grav/README.md\n.", 
            "title": "Grav"
        }, 
        {
            "location": "/apps/grav/#grav-integration-of-design-system-twig-files", 
            "text": "With the inclusion of the Grav plugin,  twig-namespaces , Grav Twig templates in  templates/  can  {% include %} ,  {% extends %} , and  {% embed %}  the Twig patterns within  source/_patterns/ . Similar to Drupal above, including these patterns is done as follows:  {% include  @organisms/path/to/file.twig  with {\n  title: label,\n  imageUrl: field_name.raw.path,\n  largeCTA: true,\n} %}  Configuration for Grav and additional docs can found at  apps/grav/README.md .", 
            "title": "Grav integration of design system Twig files"
        }, 
        {
            "location": "/approach/styles/", 
            "text": "Sass\n\n\nParticle makes a very clear distinction between \nprinting\n and \nnon-printing\n Sass in components.\n\n\n\n\nPrinting Sass generates actual, rendered CSS output.\n\n\n\n\nThis results in rendered CSS:\n\n\n.thing {\n  background: blue;\n}\n\n\n\n\n\n\nNon-printing Sass results in no CSS\n\n\n\n\nThis won't output any CSS:\n\n\n$rando-var: 33px;\n@mixin doThing() {\n  background: blue;\n}\n\n\n\n\nThere is a distinct role for each in the component system of Particle. In the \nbutton\n component featured above in \nAnatomy of a Component\n, note this import:\n\n\n// source/_patterns/01-atoms/button/_index.js\n...\nimport './_button.scss';\n...\n\n\n\n\n\nLooking into \nsource/_patterns/01-atoms/button/_button.scss\n reveals:\n\n\n@import '../../00-protons/config'; // DOES NOT OUTPUT CSS!\n\n$btn-border-radius: 0.25rem;\n@import \n~bootstrap/scss/buttons\n; // OUTPUTS CSS!\n\n.custom-class {\n  color: red;    // OUTPUTS CSS!\n}\n\n\n\n\nThis approach to component styes allows sharing non-printing Sass \nconfiguration\n, while also ensuring our component prints its custom CSS exactly once. We can now safely \n@import 'atoms/button;\n anywhere in our other javascript components as many times as needed and there will be no duplicate CSS output for buttons!\n\n\nBEM\n\n\nThis is not enforced, because it would be hellish to lint for... but we strongly encourage the use of \nBEM syntax\n for your markup and stylesheets. \n\n\nStyle Rules\n\n\nOur in-house code style rules are designed for readability and avoiding \nspecificity wars\n as much as possible.", 
            "title": "Sass/CSS"
        }, 
        {
            "location": "/approach/styles/#sass", 
            "text": "Particle makes a very clear distinction between  printing  and  non-printing  Sass in components.   Printing Sass generates actual, rendered CSS output.   This results in rendered CSS:  .thing {\n  background: blue;\n}   Non-printing Sass results in no CSS   This won't output any CSS:  $rando-var: 33px;\n@mixin doThing() {\n  background: blue;\n}  There is a distinct role for each in the component system of Particle. In the  button  component featured above in  Anatomy of a Component , note this import:  // source/_patterns/01-atoms/button/_index.js\n...\nimport './_button.scss';\n...  Looking into  source/_patterns/01-atoms/button/_button.scss  reveals:  @import '../../00-protons/config'; // DOES NOT OUTPUT CSS!\n\n$btn-border-radius: 0.25rem;\n@import  ~bootstrap/scss/buttons ; // OUTPUTS CSS!\n\n.custom-class {\n  color: red;    // OUTPUTS CSS!\n}  This approach to component styes allows sharing non-printing Sass  configuration , while also ensuring our component prints its custom CSS exactly once. We can now safely  @import 'atoms/button;  anywhere in our other javascript components as many times as needed and there will be no duplicate CSS output for buttons!", 
            "title": "Sass"
        }, 
        {
            "location": "/approach/styles/#bem", 
            "text": "This is not enforced, because it would be hellish to lint for... but we strongly encourage the use of  BEM syntax  for your markup and stylesheets.", 
            "title": "BEM"
        }, 
        {
            "location": "/approach/styles/#style-rules", 
            "text": "Our in-house code style rules are designed for readability and avoiding  specificity wars  as much as possible.", 
            "title": "Style Rules"
        }, 
        {
            "location": "/approach/js/", 
            "text": "All javascript should be written in ES6 (ES2015) according to the \nAirBnB JavaScript Style Guide\n. Webpack will use Babel to transpile all javascript back to ES5 in emitted bundles.", 
            "title": "Javascript"
        }, 
        {
            "location": "/approach/twig/", 
            "text": "Most of the Design System lives in the source folders from \n00-protons\n to \n03-organisms\n. The next two folders in source are also part of the design system, but tend to get structured slightly differently than the rest here at Phase2.\n\n\nTemplates\n\n\nTemplates are meant to be leaner. They may or may not be used explicitly by templates in Drupal and elsewhere, but they provide guidance for where classes need to be applied, and a reliable mock for Pattern Lab.\n\n\nPages\n\n\nPages are treated purely as \ndemo\n patterns. They are used \nsolely\n by Pattern Lab to mock up working designs prior/in parallel to Drupal entities being constructed. They \nuse\n the template patterns for structure, and import their own demo images that are not included in the overall design system's dependency chain. You'll notice by default, there are no individual page \"components\", everything lives comfortably inside a /demo/ folder.\n\n\nThis is one reason that the static PL bundle is so much larger than other production app bundles-- it explicitly includes the full demoPages item, as part of the demo glob inside of \napps/pl/index.js\n.\n\n\nThis split is the reason there are no demo folders inside of individual template components. Pages is a conglomeration of all template demos.", 
            "title": "Twig"
        }, 
        {
            "location": "/approach/twig/#templates", 
            "text": "Templates are meant to be leaner. They may or may not be used explicitly by templates in Drupal and elsewhere, but they provide guidance for where classes need to be applied, and a reliable mock for Pattern Lab.", 
            "title": "Templates"
        }, 
        {
            "location": "/approach/twig/#pages", 
            "text": "Pages are treated purely as  demo  patterns. They are used  solely  by Pattern Lab to mock up working designs prior/in parallel to Drupal entities being constructed. They  use  the template patterns for structure, and import their own demo images that are not included in the overall design system's dependency chain. You'll notice by default, there are no individual page \"components\", everything lives comfortably inside a /demo/ folder.  This is one reason that the static PL bundle is so much larger than other production app bundles-- it explicitly includes the full demoPages item, as part of the demo glob inside of  apps/pl/index.js .  This split is the reason there are no demo folders inside of individual template components. Pages is a conglomeration of all template demos.", 
            "title": "Pages"
        }, 
        {
            "location": "/approach/assets/", 
            "text": "Font Icons\n\n\nUseful for small, frequently used icons that are a single color which is changeable via CSS.\n\n\n\n\nPlace \nfilename.svg\n in \nsource/_patterns/01-atoms/icon/svg/\n\n\nStart up active server with \nnpm start\n or compile via \nnpm run compile:pl|drupal\n\n\nView new font icon demo page in Pattern Lab at \nAtoms \n Icon \n Icons\n\n\nUse either way:\n\n\nHTML class: \nicon--filename\n\n\nSass Mixin: \n@include icon(filename)\n\n\n\n\n\n\n\n\n\n\nIMPORTANT: Font icons are only compiled at the start of a webpack build. The webpack dev server will have to be restarted to see new icons appear in the font.\n\n\n\n\nInline SVG\n\n\nUseful for larger, less frequently used vector images that potentially could be multi-color or able to animate.\n\n\n\n\nPlace \nfile.svg\n within a namespaced folder, like \nsource/_patterns/01-atoms/icon/svg/\n.\n\n\nUse the special \n_svg.twig\n pattern to inline it completely. For instance, using the path in step 1, include it like so:\n    \ntwig\n    {% include '@atoms/image/_svg.twig' with {\n      svgpath: '@atoms/icon/svg/file.svg',\n    } %}\n\n\nOR just use the \nsource\n function provided by Twig: \n{{ source('@atoms/icon/svg/file.svg') }}\n\n\n\n\nStatic images\n\n\nIf your component uses a static image and you need it to be available for the final bundled output, you \nmust\n import it in the dependency chain. In your component's \nindex.js\n, remember to \n@import 'path/to/static-image.png';\n! A component should import \nevery\n asset that it uses. This ensures that webpack bundles all necessary production assets into the correct location in the dist folder, and correctly lines up the filepaths.\n\n\nThis is also how demo patterns consumed by Pattern Lab get any local static images. Importing images in \na-component/demo/index.js\n will ensure that they are available for Pattern Lab's demo without junking up the overall production bundle. See \nsource/_patterns/01-atoms/image/demo/index.js\n for an example.", 
            "title": "Assets"
        }, 
        {
            "location": "/approach/assets/#font-icons", 
            "text": "Useful for small, frequently used icons that are a single color which is changeable via CSS.   Place  filename.svg  in  source/_patterns/01-atoms/icon/svg/  Start up active server with  npm start  or compile via  npm run compile:pl|drupal  View new font icon demo page in Pattern Lab at  Atoms   Icon   Icons  Use either way:  HTML class:  icon--filename  Sass Mixin:  @include icon(filename)      IMPORTANT: Font icons are only compiled at the start of a webpack build. The webpack dev server will have to be restarted to see new icons appear in the font.", 
            "title": "Font Icons"
        }, 
        {
            "location": "/approach/assets/#inline-svg", 
            "text": "Useful for larger, less frequently used vector images that potentially could be multi-color or able to animate.   Place  file.svg  within a namespaced folder, like  source/_patterns/01-atoms/icon/svg/ .  Use the special  _svg.twig  pattern to inline it completely. For instance, using the path in step 1, include it like so:\n     twig\n    {% include '@atoms/image/_svg.twig' with {\n      svgpath: '@atoms/icon/svg/file.svg',\n    } %}  OR just use the  source  function provided by Twig:  {{ source('@atoms/icon/svg/file.svg') }}", 
            "title": "Inline SVG"
        }, 
        {
            "location": "/approach/assets/#static-images", 
            "text": "If your component uses a static image and you need it to be available for the final bundled output, you  must  import it in the dependency chain. In your component's  index.js , remember to  @import 'path/to/static-image.png'; ! A component should import  every  asset that it uses. This ensures that webpack bundles all necessary production assets into the correct location in the dist folder, and correctly lines up the filepaths.  This is also how demo patterns consumed by Pattern Lab get any local static images. Importing images in  a-component/demo/index.js  will ensure that they are available for Pattern Lab's demo without junking up the overall production bundle. See  source/_patterns/01-atoms/image/demo/index.js  for an example.", 
            "title": "Static images"
        }, 
        {
            "location": "/faq/general/", 
            "text": "Why doesn't Particle support _?\n\n\nParticle is designed to be application-agnostic. If your application can use javascript and/or css, a Particle-built design system can be compiled for it.\n\n\nIf you want Particle to include a specific app by default, pull requests welcome and encouraged! \n\n\nI don't need _ app, how do I remove it?\n\n\nA couple files need to be adjusted. See \nhere\n for the breakdown.\n\n\nWhat's with the goat?\n\n\nIt's cute right?", 
            "title": "General"
        }, 
        {
            "location": "/faq/general/#why-doesnt-particle-support-_", 
            "text": "Particle is designed to be application-agnostic. If your application can use javascript and/or css, a Particle-built design system can be compiled for it.  If you want Particle to include a specific app by default, pull requests welcome and encouraged!", 
            "title": "Why doesn't Particle support _?"
        }, 
        {
            "location": "/faq/general/#i-dont-need-_-app-how-do-i-remove-it", 
            "text": "A couple files need to be adjusted. See  here  for the breakdown.", 
            "title": "I don't need _ app, how do I remove it?"
        }, 
        {
            "location": "/faq/general/#whats-with-the-goat", 
            "text": "It's cute right?", 
            "title": "What's with the goat?"
        }, 
        {
            "location": "/faq/troubleshooting/", 
            "text": "it's usually npm rebuild node-sass or a misplaced comma during a twig compile.\n\n\nsometimes it's linting rules, which can be disabled as needed. we recommend not doing that too often, though. they're enabled to help you!\n\n\nwill fill this out more as more errors/pain points are found :(", 
            "title": "Troubleshooting"
        }, 
        {
            "location": "/faq/how-to-contribute/", 
            "text": "Particle\n\n\nPull Requests, bug reports, and the like on the \nParticle repo\n are welcomed and encouraged.\n\n\nPlease install an \nEditorConfig plugin\n to match coding conventions before opening PRs.\n\n\nThese docs\n\n\nPull requests to the \nFront End docs repo\n are welcomed and encouraged. If you are employed by Phase2, you can edit the files directly in github. Thanks!", 
            "title": "How to contribute"
        }, 
        {
            "location": "/faq/how-to-contribute/#particle", 
            "text": "Pull Requests, bug reports, and the like on the  Particle repo  are welcomed and encouraged.  Please install an  EditorConfig plugin  to match coding conventions before opening PRs.", 
            "title": "Particle"
        }, 
        {
            "location": "/faq/how-to-contribute/#these-docs", 
            "text": "Pull requests to the  Front End docs repo  are welcomed and encouraged. If you are employed by Phase2, you can edit the files directly in github. Thanks!", 
            "title": "These docs"
        }, 
        {
            "location": "/appendix/glossary/", 
            "text": "", 
            "title": "Glossary"
        }, 
        {
            "location": "/appendix/library/", 
            "text": "Technologies included\n\n\n\n\nWebpack\n\n\nGulp\n\n\nBabel\n\n\nJest\n\n\nTwig\n\n\nSass\n\n\nyo\n\n\nBootstrap\n\n\nESLint\n\n\nStylelint\n\n\n\n\nFurther Reading\n\n\n\n\nPattern Lab\n\n\nAtomic Design", 
            "title": "Library"
        }, 
        {
            "location": "/appendix/library/#technologies-included", 
            "text": "Webpack  Gulp  Babel  Jest  Twig  Sass  yo  Bootstrap  ESLint  Stylelint", 
            "title": "Technologies included"
        }, 
        {
            "location": "/appendix/library/#further-reading", 
            "text": "Pattern Lab  Atomic Design", 
            "title": "Further Reading"
        }
    ]
}